test-server:
  only:
    - merge_requests
  image: python:3.10.10-slim-buster
  variables:
    PIP_CACHE_DIR: '$CI_PROJECT_DIR/.cache/pip'
    PYTHONPATH: './server:./server/src'
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: postgres
    POSTGRES_SERVER: db
    POSTGRES_PORT: 5432
    POSTGRES_TEST_PORT: 5432
    POSTGRES_TEST_SERVER: test-db
  services:
    - name:  rmargar/timescaledb-ha-toolkit:latest
      alias: test-db
  cache:
    paths:
      - .cache/pip
      - venv/
      - client/nextapp/node_modules
  before_script:
    - apt update -y && apt install make -y
    - apt-get update && apt-get -y install libpq-dev gcc curl
    - make --version
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - make install-back-deps
    - make install-back-test-deps
  script:
    - make lint-server
    - make test-server
    - curl -Os https://uploader.codecov.io/latest/linux/codecov
    - chmod +x codecov
    - ./codecov -t $CODECOV_TOKEN -R $CI_PROJECT_DIR
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build:
  only:
    - merge_requests
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk update
    - apk add bash
  script:
    - ./scripts/build.sh

release-main:
  only:
    - main
  stage: build
  variables:
    BACKEND_IMAGE_TAG: $CI_REGISTRY_IMAGE/server:$CI_COMMIT_REF_SLUG
    WORKER_IMAGE_TAG: $CI_REGISTRY_IMAGE/worker:$CI_COMMIT_REF_SLUG
    FRONTEND_IMAGE_TAG: $CI_REGISTRY_IMAGE/client:$CI_COMMIT_REF_SLUG
    DOCKER_TLS_CERTDIR: '/certs'
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_COMMIT_REF_SLUG
    - echo $BACKEND_IMAGE_TAG
    - echo $FRONTEND_IMAGE_TAG
    - echo $WORKER_IMAGE_TAG
    - apk update
    - apk add bash
  script:
    - ./scripts/release.sh

deploy-production:
  only:
    - main
  stage: deploy
  variables:
    BACKEND_IMAGE_TAG: $CI_REGISTRY_IMAGE/server:$CI_COMMIT_REF_SLUG
    WORKER_IMAGE_TAG: $CI_REGISTRY_IMAGE/worker:$CI_COMMIT_REF_SLUG
    FRONTEND_IMAGE_TAG: $CI_REGISTRY_IMAGE/client:$CI_COMMIT_REF_SLUG
    DOCKER_TLS_CERTDIR: '/certs'
    ENVIRONMENT: production
  environment: production
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_COMMIT_REF_SLUG
    - echo $BACKEND_IMAGE_TAG
    - echo $FRONTEND_IMAGE_TAG
    - echo $WORKER_IMAGE_TAG
    - apk update
    - apk add bash
  script:
    - ./scripts/deploy.sh
